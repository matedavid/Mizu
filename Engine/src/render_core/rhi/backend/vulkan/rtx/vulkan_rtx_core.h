#pragma once

#include "render_core/rhi/backend/vulkan/vulkan_core.h"

namespace Mizu::Vulkan
{

// Forward declarations
class VulkanBufferResource;
class VulkanAccelerationStructure;

extern PFN_vkGetBufferDeviceAddressKHR vkGetBufferDeviceAddressKHR;
extern PFN_vkGetAccelerationStructureDeviceAddressKHR vkGetAccelerationStructureDeviceAddressKHR;
extern PFN_vkCreateAccelerationStructureKHR vkCreateAccelerationStructureKHR;
extern PFN_vkDestroyAccelerationStructureKHR vkDestroyAccelerationStructureKHR;
extern PFN_vkCmdBuildAccelerationStructuresKHR vkCmdBuildAccelerationStructuresKHR;
extern PFN_vkGetAccelerationStructureBuildSizesKHR vkGetAccelerationStructureBuildSizesKHR;

extern PFN_vkCreateRayTracingPipelinesKHR vkCreateRayTracingPipelinesKHR;
extern PFN_vkGetRayTracingShaderGroupHandlesKHR vkGetRayTracingShaderGroupHandlesKHR;

extern PFN_vkCmdTraceRaysKHR vkCmdTraceRaysKHR;

void initialize_rtx(VkDevice device);

VkPhysicalDeviceRayTracingPipelinePropertiesKHR get_rtx_properties();

VkDeviceAddress get_device_address(const VulkanBufferResource& buffer);
VkDeviceAddress get_device_address(const VulkanAccelerationStructure& as);

} // namespace Mizu::Vulkan